name: PR Quality and Security Check

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensures we have both PR base and head for a proper diff

      - name: Get Diff
        run: |
          git diff origin/main...HEAD \
            | grep '^[+-]' \
            | grep -Ev '^(---|\+\+\+)' > code_changes_only.txt
          jq -Rs '{diff: .}' code_changes_only.txt > diff.json

      - name: Display Processed Diff (Debug)
        run: cat diff.json

      - name: Analyze with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          DIFF_CONTENT=$(jq -r '.diff' diff.json)
          PROMPT="Please review the following code changes for any obvious quality or security issues. Provide a brief report:\n\n${DIFF_CONTENT}"
          jq -n --arg prompt "$PROMPT" '{
            "model": "o1",
            "reasoning_effort": "high",
            "messages": [
              {
                "role": "system",
                "content": "You are are an expert code reviewer focusing on security and quality. You are pedantic about code quality issues and security. Focus on ensuring the code adheres to best practices and common conventions. Look for any obvious vulnerabilities. Take your time and be comprehensive. In your reply be succinct and clear."
              },
              {
                "role": "user",
                "content": $prompt
              }
            ]
          }' > request.json
          cat request.json
          curl -sS https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -d @request.json > response.json

      - name: Debug OpenAI Response
        run: cat response.json

      - name: Extract Review Message
        id: extract_message
        run: |
          ASSISTANT_MSG=$(jq -r '.choices[0].message.content' response.json)
          if [ -z "$ASSISTANT_MSG" ] || [ "$ASSISTANT_MSG" = "null" ]; then
            echo "No valid assistant message found."
            exit 1
          fi
          {
            echo "message<<EOF"
            echo "$ASSISTANT_MSG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Post comment to PR
        env:
          COMMENT: ${{ steps.extract_message.outputs.message }}
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            -f body="$COMMENT"
